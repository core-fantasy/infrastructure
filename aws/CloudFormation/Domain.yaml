AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for domain names and public facing ELB.
Parameters: {}
Metadata: {}
Mappings:
  HostedZoneIds:
    Ids:
      # Default hosted zone created by AWS when registering domain
      CoreDashFantasy: ZZRRNPTTA1B6P
      CoreFantasy: Z1APFG3PO6PVI3
Resources:

  CoreDashFantasyARecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "PublicELB.DNSName"
        EvaluateTargetHealth: False
        HostedZoneId: !GetAtt "PublicELB.CanonicalHostedZoneID"
      Comment: "Alias record for core-fantasy.com to route to the ELB"
      HostedZoneId: !FindInMap [HostedZoneIds, "Ids", "CoreDashFantasy"]
      Name: "core-fantasy.com."
      Type: A
  CoreDashFantasyARecordSetWWW:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "PublicELB.DNSName"
        EvaluateTargetHealth: False
        HostedZoneId: !GetAtt "PublicELB.CanonicalHostedZoneID"
      Comment: "Alias record for www.core-fantasy.com to route to the ELB"
      HostedZoneId: !FindInMap [HostedZoneIds, "Ids", "CoreDashFantasy"]
      Name: "www.core-fantasy.com."
      Type: A


  CoreFantasyARecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "PublicELB.DNSName"
        EvaluateTargetHealth: False
        HostedZoneId: !GetAtt "PublicELB.CanonicalHostedZoneID"
      Comment: "Alias record for corefantasy.com to route to the ELB"
      HostedZoneId: !FindInMap [HostedZoneIds, "Ids", "CoreFantasy"]
      Name: "corefantasy.com."
      Type: A
  CoreFantasyARecordSetWWW:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "PublicELB.DNSName"
        EvaluateTargetHealth: False
        HostedZoneId: !GetAtt "PublicELB.CanonicalHostedZoneID"
      Comment: "Alias record for www.corefantasy.com to route to the ELB"
      HostedZoneId: !FindInMap [HostedZoneIds, "Ids", "CoreFantasy"]
      Name: "www.corefantasy.com."
      Type: A


  PublicELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Ref: PublicELBSecurityGroup
      Subnets:
        - !ImportValue 'PublicSubnetIdA'
        - !ImportValue 'PublicSubnetIdB'
  PublicELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: PublicELBSecurityGroup
      GroupDescription: Security group for the public ELB
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
      VpcId: !ImportValue 'VpcId'

  PublicELBHttpsListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      Certificates:
        - CertificateArn: !ImportValue "CoreDashFantasy-Certificate-ARN"
      ListenerArn: !Ref PublicELBHttpsListener
  PublicELBHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !ImportValue "CoreFantasy-Certificate-ARN"
      DefaultActions:
      - TargetGroupArn: !Ref 'WebServerHttpTargetGroup'
        Type: forward
      LoadBalancerArn: !Ref "PublicELB"
      Port: 443
      Protocol: HTTPS
      SslPolicy: "ELBSecurityPolicy-2016-08"

  # Gateway
  GatewayHttpsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'GatewayHttpTargetGroup'
        Type: forward
      Conditions:
      - Field: path-pattern
        Values:
        - /api/*
      ListenerArn: !Ref 'PublicELBHttpsListener'
      Priority: 1
  GatewayHttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 31000
      Protocol: HTTP
      VpcId: !ImportValue 'VpcId'

  # Web Server
  WebServerHttpsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'WebServerHttpTargetGroup'
        Type: forward
      Conditions:
      - Field: path-pattern
        Values:
        - /*
      ListenerArn: !Ref 'PublicELBHttpsListener'
      Priority: 2
  WebServerHttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue 'VpcId'

Outputs:
  PublicELBARN:
    Description: ARN of public ELB
    Value: !Ref 'PublicELB'
    Export:
      Name: !Sub 'PublicELB-ARN'
  PublicELBSecurityGroupId:
    Description: ID of public ELB security group
    Value: !Ref 'PublicELBSecurityGroup'
    Export:
      Name: !Sub 'PublicELBSecurityGroup-Id'
  GatewayHttpTargetGroupARN:
    Description: ARN of the gateway target group
    Value: !Ref 'GatewayHttpTargetGroup'
    Export:
      Name: !Sub 'GatewayHttpTargetGroup-ARN'
  WebServerHttpTargetGroupARN:
    Description: ARN of the web server target group
    Value: !Ref 'WebServerHttpTargetGroup'
    Export:
      Name: !Sub 'WebServerHttpTargetGroup-ARN'
