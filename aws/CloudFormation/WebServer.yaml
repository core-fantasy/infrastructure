AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for web server.
# For debugging ELB, https://serverfault.com/questions/469094/issues-with-ec2-elastic-load-balancer-dns-and-routing
# TODO: change over to use SSL: DNS, certs, https, 443, etc. Update helm chart, too.
Parameters:
  BucketName:
    Type: String
    Description: S3 bucket containing all cloudformation (and related) files
  EC2KeyPairName:
    Type: String
    Description: EC2 Key pair name
Resources:
  WebServerELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'WebServerELBTargetGroup'
          Type: forward
      LoadBalancerArn: !ImportValue "WebServerELB-ARN"
      Port: 80
      Protocol: HTTP
  WebServerELBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'WebServerELBTargetGroup'
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref 'WebServerELBListener'
      Priority: 1
  WebServerELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue 'VpcId'
  WebServerAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '2'
      LaunchConfigurationName: !Ref 'WebServerLaunchConfig'
      MaxSize: '5'
      MinSize: '2'
      Tags:
      - Key: Name
        Value: 'CoreFantasy-WebServerGroup-Node'
        PropagateAtLaunch: 'true'
      - Key: !Join ['', ['kubernetes.io/cluster/', !ImportValue EKSClusterName]]
        Value: 'owned'
        PropagateAtLaunch: 'true'
      TargetGroupARNs:
        - !Ref 'WebServerELBTargetGroup'
      VPCZoneIdentifier:
        - !ImportValue 'PrivateSubnetIdA'  # If using public subnet, EC2 instances need public IP to have outgoing traffic
        - !ImportValue 'PrivateSubnetIdB'
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/WebserverBanner.txt:
              # For some unknown reason pulling from S3 gives a 404, even if the file exists.
              content: |
                " "
                " "
                "      ___  __   __   ___  __        ___  __           __   __   ___"
                "|  | |__  |__) /__` |__  |__) \  / |__  |__)    |\ | /  \ |  \ |__ "
                "|/\| |___ |__) .__/ |___ |  \  \/  |___ |  \    | \| \__/ |__/ |___"
                " "
                " "
              mode: '000444'
              owner: root
              group: root
              authentication: S3AccessCreds
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20  # Minimum value
            VolumeType: gp2
            DeleteOnTermination: true
      IamInstanceProfile: !ImportValue NodeInstanceProfile
      ImageId: ami-0a54c984b9f908c81    # See: https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
      InstanceMonitoring: false
      InstanceType: t3.small
      KeyName: !Ref 'EC2KeyPairName'
      LaunchConfigurationName: WebServerLaunchConfig
      SecurityGroups:
        - !Ref 'WebServerSecurityGroup'
        - !ImportValue 'NodeSecurityGroup'
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              yum update -y
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource WebServerLaunchConfig
              cd /tmp
              cat WebserverBanner.txt > /etc/ssh_banner
              # See https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/
              #     https://aws.amazon.com/blogs/opensource/improvements-eks-worker-node-provisioning/
              /etc/eks/bootstrap.sh ${EKSClusterName} --kubelet-extra-args --node-labels=node-type=webserver
              /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource WebServerAutoScaleGroup \
                     --region ${AWS::Region}
            - EKSClusterName:
                Fn::ImportValue:
                  EKSClusterName
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServerSecurityGroup
      GroupDescription: Allows incoming HTTP & SSH traffic
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          SourceSecurityGroupId: !ImportValue "WebServerELBSecurityGroup-Id"
        - CidrIp: '0.0.0.0/0'   # TODO: block all access except from Bastion
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
      VpcId: !ImportValue 'VpcId'
