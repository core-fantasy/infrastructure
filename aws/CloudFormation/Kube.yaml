AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for the Kube (EKS) cluster.
Metadata: {}
Resources:
  CoreFantasyEKSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
  CoreFantasyEKSControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: CoreFantasyEKSControlPlaneSecurityGroup
      GroupDescription: EKS Control Plane security group
      VpcId: !ImportValue 'VpcId'
  CoreFantasyEKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: CoreFantasyEKSCluster
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref 'CoreFantasyEKSControlPlaneSecurityGroup'
        SubnetIds:
          - !ImportValue 'PrivateSubnetIdA'
          - !ImportValue 'PrivateSubnetIdB'
          - !ImportValue 'PublicSubnetIdA'
          - !ImportValue 'PublicSubnetIdB'
      RoleArn: !GetAtt 'CoreFantasyEKSIAMRole.Arn'


  # The following resources were taken from
  # https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-08-30/amazon-eks-nodegroup.yaml
  # and modified somewhat for use here.
  # Reference: https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html
  #
  # These are common resources for worker nodes in the EKS cluster.

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId: !ImportValue 'VpcId'
      Tags:
      - Key: !Sub "kubernetes.io/cluster/${CoreFantasyEKSCluster}"
        Value: 'owned'

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref CoreFantasyEKSControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref CoreFantasyEKSControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref CoreFantasyEKSControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref CoreFantasyEKSControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref CoreFantasyEKSControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

Outputs:
  EKSClusterName:
    Description: Name of the EKS cluster
    Value: !Ref CoreFantasyEKSCluster
    Export:
      Name: EKSClusterName
  NodeInstanceProfile:
    Description: IAM instance profile for EKS worker nodes
    Value: !Ref NodeInstanceProfile
    Export:
      Name: NodeInstanceProfile
  NodeSecurityGroup:
    Description: Security group for EKS worker nodes
    Value: !Ref NodeSecurityGroup
    Export:
      Name: NodeSecurityGroup
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
    Export:
      Name: NodeInstanceRole
