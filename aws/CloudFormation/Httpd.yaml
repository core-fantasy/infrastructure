AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for web server.
# TODO: rename from httpd to WebServer
# TODO: change over to use SSL: DNS, certs, https, 443, etc.
Parameters:
  BucketName:
    Type: String
    Description: S3 bucket containing all cloudformation (and related) files
Resources:
  HttpdELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !ImportValue 'PublicSubnetIdA'
        - !ImportValue 'PublicSubnetIdB'
  HttpdELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'HttpdELBTargetGroup'
          Type: forward
      LoadBalancerArn: !Ref 'HttpdELB'
      Port: 80
      Protocol: HTTP
  HttpdELBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'HttpdELBTargetGroup'
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref 'HttpdELBListener'
      Priority: 1
  HttpdELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue 'VpcId'
  HttpAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '2'
      LaunchConfigurationName: !Ref 'HttpdLaunchConfig'
      MaxSize: '5'
      MinSize: '2'
      Tags:
      - Key: Name
        Value: 'CoreFantasy-HttpdGroup-Node'
        PropagateAtLaunch: 'true'
      - Key: !Join ['', ['kubernetes.io/cluster/', !ImportValue EKSClusterName]]
        Value: 'owned'
        PropagateAtLaunch: 'true'
      TargetGroupARNs:
        - !Ref 'HttpdELBTargetGroup'
      VPCZoneIdentifier:
        - !ImportValue 'PublicSubnetIdA'
        - !ImportValue 'PublicSubnetIdB'
  HttpdLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20  # Minimum value
            VolumeType: gp2
            DeleteOnTermination: true
      IamInstanceProfile: !ImportValue NodeInstanceProfile
      ImageId: ami-08cab282f9979fc7a
      InstanceMonitoring: false
      InstanceType: t3.small
      LaunchConfigurationName: HttpdLaunchConfig
      SecurityGroups:
        - !Ref 'HttpdSecurityGroup'
        - !ImportValue 'NodeSecurityGroup'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            aws s3 cp s3://${BucketName}/scripts/JoinKubeCluster.bash - | bash -s !ImportValue EKSClusterName ${AWS::StackName} ${AWS::Region}
  HttpdSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: HttpdSecurityGroup
      GroupDescription: Allows incoming HTTP & SSH traffic
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
      VpcId: !ImportValue 'VpcId'
