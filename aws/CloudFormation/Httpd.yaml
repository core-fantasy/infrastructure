AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for web server.
Resources:
  HttpdELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !ImportValue 'PublicSubnetIdA'
        - !ImportValue 'PublicSubnetIdB'
  HttpdELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref 'HttpdELB'
      Port: 80
      Protocol: HTTP
  HttpdELBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'HttpdELBTargetGroup'
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /
            - /*
      ListenerArn: !Ref 'HttpdELBListener'
      Priority: 1
  HttpdELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue 'VpcId'
  HttpAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '2'
      LaunchConfigurationName: HttpdLaunchConfig
      MaxSize: '5'
      MinSize: '2'
      TargetGroupARNS:
        - !Ref 'HttpdELBTargetGroup'
      VPCZoneIdentifiers:
        - !ImportValue 'PublicSubnetIdA'
        - !ImportValue 'PublicSubnetIdB'
  HttpdLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-a0cfeed8
      InstanceMonitoring: false
      InstanceType: t3.small
      LaunchConfigurationName: HttpdLaunchConfig
      SecurityGroups:
        - !Ref 'HttpdSecurityGroup'
      UserData: ''
  HttpdSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: HttpdSecurityGroup
      SecurityGroupIngress:
        CidrIp: '0.0.0.0/0'
        FromPort: 80
        GroupDescription: Allow HTTP traffic
        IpProtocol: tcp
        ToPort: 80
      VpcId: !ImportValue 'VpcId'
